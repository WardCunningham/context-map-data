[
  {
    "type": "site",
    "site": "apple",
    "from": "Omega Warnsdorff's algorithm: A heuristic method for solving the Knight's Tour problem."
  },
  {
    "type": "rest",
    "from": "Eta Histogram equalization",
    "to": "Omega Pareto interpolation"
  },
  {
    "type": "store",
    "store": "redis",
    "from": "Omega Heap's permutation generation algorithm"
  },
  {
    "type": "site",
    "site": "google",
    "from": "Omega Buchberger's algorithm"
  },
  {
    "type": "rest",
    "from": "Upsilon Knuth–Bendix completion algorithm",
    "to": "Chi Stochastic universal sampling"
  },
  {
    "type": "store",
    "store": "redis",
    "from": "Chi General Problem Solver"
  },
  {
    "type": "store",
    "store": "neo4j",
    "from": "Chi Pratt parser"
  },
  {
    "type": "store",
    "store": "neo4j",
    "from": "Kappa LPBoost"
  },
  {
    "type": "site",
    "site": "amazon",
    "from": "Kappa Chan's algorithm"
  },
  {
    "type": "site",
    "site": "google",
    "from": "Kappa Kosaraju's algorithm"
  },
  {
    "type": "store",
    "store": "memcache",
    "from": "Kappa Locality-sensitive hashing"
  },
  {
    "type": "rest",
    "from": "Kappa Doomsday algorithm",
    "to": "Kappa Ridder's method"
  },
  {
    "type": "store",
    "store": "mysql",
    "from": "Kappa Median filtering"
  },
  {
    "type": "rest",
    "from": "Pi Clock with Adaptive Replacement",
    "to": "Kappa Doomsday algorithm"
  },
  {
    "type": "queue",
    "queue": "delta_kappa_watson",
    "write": "Delta Bowyer–Watson algorithm"
  },
  {
    "type": "queue",
    "queue": "delta_kappa_watson",
    "read": "Kappa RIPEMD-160"
  },
  {
    "type": "site",
    "site": "google",
    "from": "Tau Generational garbage collector"
  },
  {
    "type": "rest",
    "from": "Upsilon Gerchberg–Saxton algorithm",
    "to": "Tau Delta encoding"
  },
  {
    "type": "rest",
    "from": "Eta Pearson hashing",
    "to": "Tau Complete-linkage clustering"
  },
  {
    "type": "rest",
    "from": "Upsilon Metropolis–Hastings algorithm",
    "to": "Iota Hopfield net"
  },
  {
    "type": "rest",
    "from": "Phi Phonetic algorithm",
    "to": "Iota Pohlig&ndash;Hellman algorithm"
  },
  {
    "type": "rest",
    "from": "Chi General Problem Solver",
    "to": "Iota Traveling salesman problem"
  },
  {
    "type": "rest",
    "from": "Gamma Soundex",
    "to": "Iota Floyd–Warshall algorithm"
  },
  {
    "type": "rest",
    "from": "Gamma Pearson hashing",
    "to": "Iota Ordered subset expectation maximization"
  },
  {
    "type": "rest",
    "from": "Omega Pareto interpolation",
    "to": "Eta Pearson hashing"
  },
  {
    "type": "site",
    "site": "amazon",
    "from": "Eta top-down parser suitable for LL(''k'') grammars"
  },
  {
    "type": "rest",
    "from": "Kappa Locality-sensitive hashing",
    "to": "Eta Histogram equalization"
  },
  {
    "type": "store",
    "store": "neo4j",
    "from": "Gamma Reference counting"
  },
  {
    "type": "rest",
    "from": "Alpha Image Compression",
    "to": "Gamma Longitudinal redundancy check"
  },
  {
    "type": "rest",
    "from": "Omega Warnsdorff's algorithm: A heuristic method for solving the Knight's Tour problem.",
    "to": "Gamma Pearson hashing"
  },
  {
    "type": "store",
    "store": "elastic",
    "from": "Upsilon Bilinear interpolation"
  },
  {
    "type": "queue",
    "queue": "algorithm_gerchberg_error",
    "write": "Iota Error diffusion"
  },
  {
    "type": "queue",
    "queue": "algorithm_gerchberg_error",
    "read": "Upsilon Gerchberg–Saxton algorithm"
  },
  {
    "type": "queue",
    "queue": "algorithm_upsilon_kahan",
    "write": "Omega Kahan summation algorithm"
  },
  {
    "type": "queue",
    "queue": "algorithm_upsilon_kahan",
    "read": "Upsilon Metropolis–Hastings algorithm"
  },
  {
    "type": "store",
    "store": "elastic",
    "from": "Iota Goertzel algorithm"
  },
  {
    "type": "site",
    "site": "wikipedia",
    "from": "Iota Zobrist hashing"
  },
  {
    "type": "rest",
    "from": "Upsilon Entropy coding with known entropy characteristics",
    "to": "Iota Error diffusion"
  },
  {
    "type": "rest",
    "from": "Gamma Soundex",
    "to": "Iota Exponential-Golomb coding"
  },
  {
    "type": "rest",
    "from": "Pi Fortuna",
    "to": "Iota Lempel–Ziv Jeff Bonwick (LZJB)"
  },
  {
    "type": "store",
    "store": "memcache",
    "from": "Gamma Lempel–Ziv–Oberhumer"
  },
  {
    "type": "store",
    "store": "redis",
    "from": "Gamma Fermat primality test"
  },
  {
    "type": "store",
    "store": "mysql",
    "from": "Gamma Discrete Green's Theorem"
  },
  {
    "type": "rest",
    "from": "Mu Line Drawing: graphical algorithm for approximating a line segment on discrete graphical media.",
    "to": "Gamma Trigonometric interpolation"
  },
  {
    "type": "store",
    "store": "memcache",
    "from": "Gamma Soundex"
  },
  {
    "type": "queue",
    "queue": "the_heuristic_s",
    "write": "Omega Warnsdorff's algorithm: A heuristic method for solving the Knight's Tour problem."
  },
  {
    "type": "queue",
    "queue": "the_heuristic_s",
    "read": "Pi Support Vector Machines"
  },
  {
    "type": "rest",
    "from": "Alpha Image Compression",
    "to": "Pi Truncated binary exponential backoff"
  },
  {
    "type": "rest",
    "from": "Upsilon Knuth–Bendix completion algorithm",
    "to": "Pi Runge–Kutta methods"
  },
  {
    "type": "rest",
    "from": "Mu Heapsort",
    "to": "Pi Differential evolution"
  },
  {
    "type": "store",
    "store": "elastic",
    "from": "Pi SHA-1"
  },
  {
    "type": "rest",
    "from": "Upsilon Yamartino method",
    "to": "Omega Freivalds' algorithm"
  },
  {
    "type": "rest",
    "from": "Mu Reed–Solomon error correction",
    "to": "Omega Boyer–Moore string search algorithm"
  },
  {
    "type": "rest",
    "from": "Kappa Median filtering",
    "to": "Omega Lempel–Ziv–Stac"
  },
  {
    "type": "rest",
    "from": "Mu Forward error correction",
    "to": "Omega Ward's method"
  },
  {
    "type": "rest",
    "from": "Mu Reed–Solomon error correction",
    "to": "Eta Clipping"
  },
  {
    "type": "queue",
    "queue": "bloom_top_bloom",
    "write": "Kappa top-down parser suitable for LL(''k'') grammars"
  },
  {
    "type": "queue",
    "queue": "bloom_top_bloom",
    "read": "Eta Bloom filter"
  },
  {
    "type": "rest",
    "from": "Gamma Pearson hashing",
    "to": "Eta k-means clustering"
  },
  {
    "type": "rest",
    "from": "Phi Phonetic algorithm",
    "to": "Eta Crank-Nicolson method"
  },
  {
    "type": "rest",
    "from": "Upsilon Entropy coding with known entropy characteristics",
    "to": "Eta large integer powers of a number"
  },
  {
    "type": "rest",
    "from": "Eta large integer powers of a number",
    "to": "Eta Kosaraju's algorithm"
  },
  {
    "type": "queue",
    "queue": "yamartino_yamartino_mu",
    "write": "Mu Pollard's kangaroo algorithm"
  },
  {
    "type": "queue",
    "queue": "yamartino_yamartino_mu",
    "read": "Upsilon Yamartino method"
  },
  {
    "type": "rest",
    "from": "Kappa Median filtering",
    "to": "Upsilon Entropy coding with known entropy characteristics"
  },
  {
    "type": "rest",
    "from": "Pi SHA-1",
    "to": "Upsilon Knuth–Bendix completion algorithm"
  },
  {
    "type": "store",
    "store": "neo4j",
    "from": "Xi Alpha max plus beta min algorithm"
  },
  {
    "type": "queue",
    "queue": "eta_eta_sort",
    "write": "Eta Pearson hashing"
  },
  {
    "type": "queue",
    "queue": "eta_eta_sort",
    "read": "Xi Sort-Merge Join"
  },
  {
    "type": "rest",
    "from": "Gamma Soundex",
    "to": "Xi Ukkonen's algorithm"
  },
  {
    "type": "rest",
    "from": "Pi Truncated binary exponential backoff",
    "to": "Phi Phonetic algorithm"
  },
  {
    "type": "site",
    "site": "wikipedia",
    "from": "Phi Best-first search"
  },
  {
    "type": "queue",
    "queue": "gamma_s_discrete",
    "write": "Gamma Discrete Green's Theorem"
  },
  {
    "type": "queue",
    "queue": "gamma_s_discrete",
    "read": "Phi Ground state"
  },
  {
    "type": "queue",
    "queue": "golomb_tree_exponential",
    "write": "Iota Exponential-Golomb coding"
  },
  {
    "type": "queue",
    "queue": "golomb_tree_exponential",
    "read": "Phi Tree sort"
  },
  {
    "type": "rest",
    "from": "Mu Queuing theory",
    "to": "Phi Strand sort"
  },
  {
    "type": "rest",
    "from": "Phi Best-first search",
    "to": "Omega RIPEMD-160"
  },
  {
    "type": "queue",
    "queue": "integer_large_integer",
    "write": "Eta large integer powers of a number"
  },
  {
    "type": "queue",
    "queue": "integer_large_integer",
    "read": "Omega large integer powers of a number"
  },
  {
    "type": "rest",
    "from": "Pi Support Vector Machines",
    "to": "Omega ''n''th root algorithm"
  },
  {
    "type": "queue",
    "queue": "theorem_sensitive_theorem",
    "write": "Gamma Discrete Green's Theorem"
  },
  {
    "type": "queue",
    "queue": "theorem_sensitive_theorem",
    "read": "Omega Locality-sensitive hashing"
  },
  {
    "type": "rest",
    "from": "Upsilon Knuth–Bendix completion algorithm",
    "to": "Omega Kahan summation algorithm"
  },
  {
    "type": "site",
    "site": "google",
    "from": "Delta Petrick's method"
  },
  {
    "type": "site",
    "site": "wikipedia",
    "from": "Delta Comb sort"
  },
  {
    "type": "site",
    "site": "wikipedia",
    "from": "Delta Bowyer–Watson algorithm"
  },
  {
    "type": "store",
    "store": "redis",
    "from": "Delta Tomasulo algorithm"
  },
  {
    "type": "rest",
    "from": "Iota Exponential-Golomb coding",
    "to": "Delta Phong shading"
  },
  {
    "type": "store",
    "store": "mysql",
    "from": "Mu Heapsort"
  },
  {
    "type": "queue",
    "queue": "solomon_stac_omega",
    "write": "Omega Lempel–Ziv–Stac"
  },
  {
    "type": "queue",
    "queue": "solomon_stac_omega",
    "read": "Mu Reed–Solomon error correction"
  },
  {
    "type": "rest",
    "from": "Mu Pollard's kangaroo algorithm",
    "to": "Mu Spline interpolation"
  },
  {
    "type": "rest",
    "from": "Gamma Longitudinal redundancy check",
    "to": "Mu Queuing theory"
  },
  {
    "type": "store",
    "store": "neo4j",
    "from": "Mu Line Drawing: graphical algorithm for approximating a line segment on discrete graphical media."
  },
  {
    "type": "queue",
    "queue": "kangaroo_s_s",
    "write": "Omega ''n''th root algorithm"
  },
  {
    "type": "queue",
    "queue": "kangaroo_s_s",
    "read": "Mu Pollard's kangaroo algorithm"
  },
  {
    "type": "queue",
    "queue": "mu_correction_solomon",
    "write": "Mu Reed–Solomon error correction"
  },
  {
    "type": "queue",
    "queue": "mu_correction_solomon",
    "read": "Mu Forward error correction"
  },
  {
    "type": "rest",
    "from": "Tau Delta encoding",
    "to": "Mu Minimum degree algorithm"
  },
  {
    "type": "rest",
    "from": "Upsilon Metropolis–Hastings algorithm",
    "to": "Kappa Computation of π"
  },
  {
    "type": "store",
    "store": "memcache",
    "from": "Kappa Symmetric (secret key) encryption"
  },
  {
    "type": "rest",
    "from": "Tau Complete-linkage clustering",
    "to": "Kappa top-down parser suitable for LL(''k'') grammars"
  },
  {
    "type": "rest",
    "from": "Eta Clipping",
    "to": "Kappa Lax-Wendroff"
  },
  {
    "type": "site",
    "site": "amazon",
    "from": "Pi Transitive closure"
  },
  {
    "type": "rest",
    "from": "Alpha Inside-outside algorithm",
    "to": "Pi Clock with Adaptive Replacement"
  },
  {
    "type": "rest",
    "from": "Mu Line Drawing: graphical algorithm for approximating a line segment on discrete graphical media.",
    "to": "Pi SHA-1"
  },
  {
    "type": "rest",
    "from": "Omega ''n''th root algorithm",
    "to": "Pi Fortuna"
  },
  {
    "type": "rest",
    "from": "Xi Alpha max plus beta min algorithm",
    "to": "Pi Wang and Landau algorithm"
  },
  {
    "type": "rest",
    "from": "Mu Line Drawing: graphical algorithm for approximating a line segment on discrete graphical media.",
    "to": "Alpha k-means clustering"
  },
  {
    "type": "rest",
    "from": "Eta top-down parser suitable for LL(''k'') grammars",
    "to": "Alpha Inside-outside algorithm"
  },
  {
    "type": "rest",
    "from": "Omega Warnsdorff's algorithm: A heuristic method for solving the Knight's Tour problem.",
    "to": "Alpha Image Compression"
  },
  {
    "type": "store",
    "store": "mysql",
    "from": "Alpha Tree sort"
  }
]
